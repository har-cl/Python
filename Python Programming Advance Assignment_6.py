print('1. You are given two strings s and t. String t is generated by randomly shuffling string s and then adding one more letter at a random position. Return the letter that was added to t.')

def find_the_difference(s1, s2):
    for i in s2:
        if i not in s1 or s1.count(i)<s2.count(i):
            return i

print(find_the_difference("abcd", "abcde")  )



print('\n 2. Given a function that accepts unlimited arguments, check and count how many data types are in those arguments. Finally return the total in a list.')

def count_datatypes(*args):
    tint = tstr = tbool = tlist = ttuple = tdict= 0
    #tint, tbool, tlist, ttuple, tdict = 0
    l = []
    for i in args:
        if type(i)==int:
            tint+=1
        elif type(i)==str:
            tstr+=1
        elif type(i)==bool:
            tbool+=1
        elif type(i)==list:
            tlist+=1
        elif type(i)==tuple:
            ttuple+=1
        elif type(i)==dict:
            tdict+=1
    l.append(tint)
    l.append(tint)
    l.append(tbool)
    l.append(tlist)
    l.append(ttuple)
    l.append(tdict)
    return l


print(count_datatypes("Hello", "Bye", True, True, False, {"1": "One", "2": "Two"}, [1, 3], {"Brayan": 18}, 25, 23))



print('\n 3. A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses in a similar fashion as the Fibonacci series.')

def fib_str(i1, l):
    if i1>2:
        print('e, a', end = '')
        for i in range(2,i1):
            add = l[i-1]+l[i-2]
            l.append(add)
            print(', ', add, end='')

fib_str(5, ["e", "a"])



print('\n 4. Given an integer between 0 and 26, make a variable (self.answer). That variable would be assigned to a string in this format:')

def ones_threes_nines(n):
    one = three = nine = 0

    nine = n // 9
    n -= 9*nine
    three = n // 3
    n -= 3*three
    one = n
    return 'nines: {} , threes: {} , ones: {}'.format(nine, three, one)

print(ones_threes_nines(15))



print('\n 5. Write a non-recursive function that takes an integer n and returns the Fibonacci sequence\'s value at index n.')

def fib(n):
    l = [0, 1]
    if n == 1:
        return 0
    elif n == 2:
        return 1
    elif n > 2:
        next = 0
        for i in range(2,n+1):
            next = l[0]+l[1]
            l[0] = l[1]
            l[1] = next
        return next

print(fib(6))